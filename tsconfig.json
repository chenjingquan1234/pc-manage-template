{
  "compilerOptions": {
    /* Basic Options */
    "target": "ES2020", // target用于指定编译之后的版本目标: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'.
    "module": "ESNext", // 用来指定要使用的模块标准: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"], // lib用于指定要包含在编译中的库文件
    "skipLibCheck": true,
    "types": ["vite/client", "node"], // types用来指定需要包含的模块，只有在这里列出的模块的声明文件才会被加载进来
    // "sourceMap": true, // sourceMap的值为true或false，用来指定编译时是否生成.map文件
    // "checkJs": true, // checkJs的值为true或false，用来指定是否检查和报告js文件中的错误，默认是false
    "composite": true, // 是否编译构建引用项目
    "baseUrl": "./", // baseUrl用于设置解析非相对模块名称的基本目录，相对模块不会受baseUrl的影响
    "paths": {
      // 用于设置模块名称到基于baseUrl的路径映射
      "@/*": ["src/*"],
      "@apis/*": ["src/apis/*"],
      "@views/*": ["src/views/*"],
      "@components/*": ["src/components/*"],
      "@hooks/*": ["src/hooks/*"],
      "@utils/*": ["src/utils/*.ts"],
      "@stores/*": ["src/stores/*.ts"],
      // "@/consts": ["src/consts/*.ts"],
      "@router/*": ["src/router/*.ts"],
      "@types/*": ["src/types/*"]
    },

    /* Bundler mode */
    "moduleResolution": "Node", // 用于选择模块解析策略，有'node'和'classic'两种类型'
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "removeComments": true, // removeComments的值为true或false，用于指定是否将编译后的文件中的注释删掉，设为true的话即删掉注释，默认为false
    "noEmit": true,
    "jsx": "preserve", // 指定jsx代码用于的开发环境: 'preserve', 'react-native', or 'react'.

    /* Linting */
    "strict": true, //  strict的值为true或false，用于指定是否启动所有类型检查，如果设为true则会同时开启下面这几个严格类型检查，默认为false
    "noImplicitAny": true, // noImplicitAny的值为true或false，如果我们没有为一些值设置明确的类型，编译器会默认认为这个值为any，如果noImplicitAny的值为true的话。则没有明确的类型会报错。默认值为false */
    "strictNullChecks": true, // strictNullChecks为true时，null和undefined值不能赋给非这两种类型的值，别的类型也不能赋给他们，除了any类型。还有个例外就是undefined可以赋值给void类型 */
    "strictFunctionTypes": true, // strictFunctionTypes的值为true或false，用于指定是否使用函数参数双向协变检查
    "strictBindCallApply": true, // 设为true后会对bind、call和apply绑定的方法的参数的检测是严格检测的
    "strictPropertyInitialization": true, // 设为true后会检查类的非undefined属性是否已经在构造函数里初始化，如果要开启这项，需要同时开启strictNullChecks，默认为false
    "noImplicitThis": true, // 当this表达式的值为any类型的时候，生成一个错误
    "alwaysStrict": true, //alwaysStrict的值为true或false，指定始终以严格模式检查每个模块，并且在编译之后的js文件中加入"use strict"字符串，用来告诉浏览器该js为严格模式

    /* Additional Checks
    "noUnusedLocals": true, // 用于检查是否有定义了但是没有使用的变量，对于这一点的检测，使用eslint可以在你书写代码的时候做提示，你可以配合使用。它的默认值为false,
    "noUnusedParameters": true, // 用于检查是否有在函数体中没有使用的参数，这个也可以配合eslint来做检查，默认为false,
    "noImplicitReturns": true, // 用于检查函数是否有返回值，设为true后，如果函数没有返回值则会提示，默认为false,
    "noFallthroughCasesInSwitch": true, // 用于检查switch中是否有case没有使用break跳出switch，默认为false,

    /* Experimental Options */
    "experimentalDecorators": true, // 用于指定是否启用实验性的装饰器特性
    "emitDecoratorMetadata": true // 用于指定是否为装饰器提供元数据支持，关于元数据，也是ES6的新标准，可以通过Reflect提供的静态方法获取元数据，如果需要使用Reflect的一些方法，需要引入ES2015.Reflect这个库 */
  },
  "include": [
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "env.d.ts",
    "src/types/auto-imports.d.ts"
  ], // include也可以指定要编译的路径列表，但是和files的区别在于，这里的路径可以是文件夹，也可以是文件，可以使用相对和绝对路径，而且可以使用通配符，比如"./src"即表示要编译src文件夹下的所有文件以及子文件夹的文件
  "references": [{ "path": "./tsconfig.node.json" }]
  // "exclude": [],  // exclude表示要排除的、不编译的文件，它也可以指定一个列表，规则和include一样，可以是文件或文件夹，可以是相对路径或绝对路径，可以使用通配符
}
